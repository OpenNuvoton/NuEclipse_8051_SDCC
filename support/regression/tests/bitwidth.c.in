/* Test width operations from stdbit.h

   type: unsigned short, unsigned int, unsigned long, unsigned long long
 */

#include <testfwk.h>

#ifdef __SDCC // Todo: Enable for all C2X implementations
#pragma std_c2x
#include <stdbit.h>
#endif

volatile {type} i;

void
testCount(void)
{
#ifdef __SDCC // Todo: Enable for all C2X implementations
	i = 0x0;
	ASSERT (stdc_bit_width(i) == 0);
	ASSERT (stdc_bit_floor(i) == 0);
	ASSERT (stdc_bit_ceil(i) == 1);

	i = 0x1;
	ASSERT (stdc_bit_width(i) == 1);
	ASSERT (stdc_bit_floor(i) == 1);
	ASSERT (stdc_bit_ceil(i) == 1);
#if !defined(__SDCC_pdk14) && !defined(__SDCC_pdk15)// Lack of memory
	i = 0x2;
	ASSERT (stdc_bit_width(i) == 2);
	ASSERT (stdc_bit_floor(i) == 2);
	ASSERT (stdc_bit_ceil(i) == 2);

	i = 0x3;
	ASSERT (stdc_bit_width(i) == 2);
	ASSERT (stdc_bit_floor(i) == 2);
	ASSERT (stdc_bit_ceil(i) == 4);

	i = 0x7;
	ASSERT (stdc_bit_width(i) == 3);
	ASSERT (stdc_bit_floor(i) == 4);
	ASSERT (stdc_bit_ceil(i) == 8);

	i = 0x8;
	ASSERT (stdc_bit_width(i) == 4);
	ASSERT (stdc_bit_floor(i) == 8);
	ASSERT (stdc_bit_ceil(i) == 8);

	i = 0x9;
	ASSERT (stdc_bit_width(i) == 4);
	ASSERT (stdc_bit_floor(i) == 8);
	ASSERT (stdc_bit_ceil(i) == 16);
#endif
#endif
}

